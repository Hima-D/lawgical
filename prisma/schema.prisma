generator client {
  provider = "prisma-client-js"
  output   = "../src/generated/prisma"
}

datasource db {
  provider = "postgresql"
  url      = env("DATABASE_URL")
}

model User {
  id            Int            @id @default(autoincrement())
  email         String         @unique
  passwordHash  String
  userType      String
  createdAt     DateTime       @default(now())
  displayName   String?
  photoUrl      String?
  phoneNumber   String?
  appointments  Appointment[]  @relation("ClientAppointments")
  lawyerProfile LawyerProfile?
}

model LawyerProfile {
  id             Int                @id @default(autoincrement())
  userId         Int                @unique
  bio            String
  specialization String
  licenseNumber  String
  createdAt      DateTime           @default(now())
  firmName       String?
  address        String?
  websiteUrl     String?
  hourlyRate     Float?
  appointments   Appointment[]      @relation("LawyerAppointments")
  availability   AvailabilitySlot[]
  user           User               @relation(fields: [userId], references: [id])
  services       Service[]
}

model Service {
  id              Int           @id @default(autoincrement())
  lawyerProfileId Int
  name            String
  description     String
  price           Float
  durationMinutes Int
  createdAt       DateTime      @default(now())
  category        String?
  appointments    Appointment[]
  lawyerProfile   LawyerProfile @relation(fields: [lawyerProfileId], references: [id])
}

model AvailabilitySlot {
  id              Int           @id @default(autoincrement())
  lawyerProfileId Int
  startTime       String
  endTime         String
  date            DateTime
  isBooked        Boolean
  createdAt       DateTime      @default(now())
  notes           String?
  appointments    Appointment[]
  lawyerProfile   LawyerProfile @relation(fields: [lawyerProfileId], references: [id])
}

model Appointment {
  id                 Int              @id @default(autoincrement())
  clientId           Int
  lawyerProfileId    Int
  serviceId          Int
  availabilitySlotId Int
  appointmentDate    DateTime
  appointmentTime    String
  status             String
  createdAt          DateTime         @default(now())
  clientNotes        String?
  lawyerNotes        String?
  availabilitySlot   AvailabilitySlot @relation(fields: [availabilitySlotId], references: [id])
  client             User             @relation("ClientAppointments", fields: [clientId], references: [id])
  lawyerProfile      LawyerProfile    @relation("LawyerAppointments", fields: [lawyerProfileId], references: [id])
  service            Service          @relation(fields: [serviceId], references: [id])
}
